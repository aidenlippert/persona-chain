import{a as u}from"./EliteWeb3Button-QcKBiMyG.js";import{e as h}from"./index-4ObsLF-s.js";class d{static instance;rpcEndpoint;chainId;gasPrice;constructor(){this.rpcEndpoint="https://personachain-prod.uc.r.appspot.com",this.chainId="personachain-1",this.gasPrice=u.GasPrice.fromString("0.025upersona")}static getInstance(){return d.instance||(d.instance=new d),d.instance}async submitCreateDIDTransaction(t,o,e){try{if(console.log(`[COSMOS-TX] Submitting DID creation transaction for: ${t}`),typeof window>"u"||!window.keplr)throw new Error("Keplr wallet not available");await window.keplr.enable(this.chainId);const n=window.keplr.getOfflineSigner(this.chainId),s=await n.getAccounts();if(s.length===0)throw new Error("No accounts found in Keplr");const r=s[0].address;console.log(`[COSMOS-TX] Signing with address: ${r}`);const c=await u.SigningStargateClient.connectWithSigner(this.rpcEndpoint,n,{gasPrice:this.gasPrice}),l={typeUrl:"/persona_chain.did.v1.MsgCreateDid",value:{creator:r,id:t,didDocument:JSON.stringify(o)}},g=await c.simulate(r,[l],""),i=Math.round(g*1.3);console.log(`[COSMOS-TX] Estimated gas: ${g}, using: ${i}`);const a=await c.signAndBroadcast(r,[l],{amount:[{denom:"upersona",amount:"5000"}],gas:i.toString()},`Creating DID: ${t}`);return console.log("[COSMOS-TX] Transaction result:",a),a.code===0?(console.log(`[COSMOS-TX] DID created successfully with tx hash: ${a.transactionHash}`),{success:!0,txHash:a.transactionHash}):(console.error(`[COSMOS-TX] Transaction failed with code ${a.code}: ${a.rawLog}`),{success:!1,error:`Transaction failed: ${a.rawLog}`})}catch(n){return console.error("[COSMOS-TX] Failed to submit DID creation transaction:",n),h.logError("Failed to submit DID creation transaction:",n),{success:!1,error:n instanceof Error?n.message:"Unknown error"}}}async submitUpdateDIDTransaction(t,o,e){try{if(console.log(`[COSMOS-TX] Submitting DID update transaction for: ${t}`),typeof window>"u"||!window.keplr)throw new Error("Keplr wallet not available");await window.keplr.enable(this.chainId);const n=window.keplr.getOfflineSigner(this.chainId),s=await n.getAccounts();if(s.length===0)throw new Error("No accounts found in Keplr");const r=s[0].address,c=await u.SigningStargateClient.connectWithSigner(this.rpcEndpoint,n,{gasPrice:this.gasPrice}),l={typeUrl:"/persona_chain.did.v1.MsgUpdateDid",value:{creator:r,id:t,didDocument:JSON.stringify(o)}},g=await c.simulate(r,[l],""),i=Math.round(g*1.3),a=await c.signAndBroadcast(r,[l],{amount:[{denom:"upersona",amount:"3000"}],gas:i.toString()},`Updating DID: ${t}`);return a.code===0?(console.log(`[COSMOS-TX] DID updated successfully with tx hash: ${a.transactionHash}`),{success:!0,txHash:a.transactionHash}):{success:!1,error:`Transaction failed: ${a.rawLog}`}}catch(n){return console.error("[COSMOS-TX] Failed to submit DID update transaction:",n),{success:!1,error:n instanceof Error?n.message:"Unknown error"}}}async submitDeactivateDIDTransaction(t,o){try{if(console.log(`[COSMOS-TX] Submitting DID deactivation transaction for: ${t}`),typeof window>"u"||!window.keplr)throw new Error("Keplr wallet not available");await window.keplr.enable(this.chainId);const e=window.keplr.getOfflineSigner(this.chainId),n=await e.getAccounts();if(n.length===0)throw new Error("No accounts found in Keplr");const s=n[0].address,r=await u.SigningStargateClient.connectWithSigner(this.rpcEndpoint,e,{gasPrice:this.gasPrice}),c={typeUrl:"/persona_chain.did.v1.MsgDeactivateDid",value:{creator:s,id:t}},l=await r.simulate(s,[c],""),g=Math.round(l*1.3),i=await r.signAndBroadcast(s,[c],{amount:[{denom:"upersona",amount:"2000"}],gas:g.toString()},`Deactivating DID: ${t}`);return i.code===0?(console.log(`[COSMOS-TX] DID deactivated successfully with tx hash: ${i.transactionHash}`),{success:!0,txHash:i.transactionHash}):{success:!1,error:`Transaction failed: ${i.rawLog}`}}catch(e){return console.error("[COSMOS-TX] Failed to submit DID deactivation transaction:",e),{success:!1,error:e instanceof Error?e.message:"Unknown error"}}}async checkChainHealth(){try{const t=Date.now(),e=await(await u.StargateClient.connect(this.rpcEndpoint)).getChainId(),n=Date.now()-t;return console.log(`[COSMOS-TX] Chain health check successful. Chain ID: ${e}, Latency: ${n}ms`),{isHealthy:!0,latency:n}}catch(t){return console.error("[COSMOS-TX] Chain health check failed:",t),{isHealthy:!1,error:t instanceof Error?t.message:"Unknown error"}}}async getAccountBalance(t){try{const e=await(await u.StargateClient.connect(this.rpcEndpoint)).getBalance(t,"upersona");return console.log(`[COSMOS-TX] Account balance for ${t}: ${e.amount} ${e.denom}`),{balance:e.amount}}catch(o){return console.error("[COSMOS-TX] Failed to get account balance:",o),{balance:"0",error:o instanceof Error?o.message:"Unknown error"}}}}const p=d.getInstance();export{d as CosmosTransactionService,p as cosmosTransactionService};
