name: Connectors CI/CD

on:
  push:
    branches: [main, develop]
    paths:
      - 'apps/connectors/**'
      - '.github/workflows/connectors-ci.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'apps/connectors/**'

env:
  NODE_VERSION: '18.x'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_PREFIX: personapass/connector

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: 'apps/connectors'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run npm audit
        run: |
          cd apps/connectors
          npm audit --audit-level=high

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --file=apps/connectors/package.json

  test:
    name: Test Connectors
    runs-on: ubuntu-latest
    strategy:
      matrix:
        connector: [github, linkedin, orcid, plaid, twitter, stackexchange]
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: apps/connectors/package-lock.json

      - name: Install dependencies
        run: |
          cd apps/connectors
          npm ci

      - name: Run tests for ${{ matrix.connector }}
        run: |
          cd apps/connectors/${{ matrix.connector }}
          npm test -- --coverage
        env:
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          JWT_SECRET: test-secret
          ISSUER_DID: did:test:issuer
          ISSUER_PRIVATE_KEY: ${{ secrets.TEST_ISSUER_PRIVATE_KEY }}
          ISSUER_PUBLIC_KEY: ${{ secrets.TEST_ISSUER_PUBLIC_KEY }}

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: connector-${{ matrix.connector }}
          directory: apps/connectors/${{ matrix.connector }}/coverage

  e2e-test:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [test]
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          cd apps/connectors
          npm ci
          npx playwright install --with-deps

      - name: Run E2E tests
        run: |
          cd apps/connectors
          npm run test:e2e
        env:
          REDIS_HOST: localhost
          JWT_SECRET: test-secret

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-report
          path: apps/connectors/playwright-report/
          retention-days: 30

  build:
    name: Build Connector Images
    runs-on: ubuntu-latest
    needs: [security-scan, test]
    if: github.event_name == 'push'
    
    strategy:
      matrix:
        connector: [github, linkedin, orcid, plaid, twitter, stackexchange]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_PREFIX }}-${{ matrix.connector }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: apps/connectors
          file: apps/connectors/${{ matrix.connector }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            CONNECTOR=${{ matrix.connector }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}

  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4

      - name: Configure kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Set up Kustomize
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          sudo mv kustomize /usr/local/bin/

      - name: Configure K8s credentials
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig
          echo "KUBECONFIG=$PWD/kubeconfig" >> $GITHUB_ENV

      - name: Deploy connectors
        run: |
          for connector in github linkedin orcid plaid twitter stackexchange; do
            kustomize edit set image ${connector}=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_PREFIX }}-${connector}:main-${{ github.sha }}
          done
          kubectl apply -k k8s/connectors/overlays/production

      - name: Verify deployment
        run: |
          kubectl rollout status deployment/connector-github -n connectors
          kubectl rollout status deployment/connector-linkedin -n connectors
          kubectl rollout status deployment/connector-orcid -n connectors
          kubectl rollout status deployment/connector-plaid -n connectors
          kubectl rollout status deployment/connector-twitter -n connectors
          kubectl rollout status deployment/connector-stackexchange -n connectors

      - name: Run smoke tests
        run: |
          for connector in github linkedin orcid plaid twitter stackexchange; do
            endpoint=$(kubectl get service connector-${connector} -n connectors -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            curl -f http://${endpoint}/health || exit 1
          done

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [deploy]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4

      - name: Run integration tests
        run: |
          cd apps/connectors
          npm run test:integration
        env:
          CONNECTOR_API_URL: ${{ secrets.PRODUCTION_CONNECTOR_API_URL }}
          TEST_USER_TOKEN: ${{ secrets.TEST_USER_TOKEN }}