name: Sprint 3 Production Deployment

on:
  push:
    branches: [sprint3/true-zk-onchain]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test-smart-contracts:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: wasm32-unknown-unknown

      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run contract tests
        run: |
          cd contracts/zk-verifier
          cargo test --release

      - name: Build WASM contract
        run: |
          cd contracts/zk-verifier
          cargo build --target wasm32-unknown-unknown --release

      - name: Run integration tests
        run: |
          cd contracts/zk-verifier
          cargo test --test integration_test --release

  test-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: apps/backend/package-lock.json

      - name: Install backend dependencies
        run: |
          cd apps/backend
          npm ci

      - name: Run backend tests
        run: |
          cd apps/backend
          npm test

      - name: Test ZK proof generation
        run: |
          cd apps/backend
          npm run test:zk

  test-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: persona-frontend/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd persona-frontend
          npm ci

      - name: Run frontend tests
        run: |
          cd persona-frontend
          npm test

      - name: Build frontend
        run: |
          cd persona-frontend
          npm run build

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Gosec Security Scanner
        uses: securecodewarrior/github-action-gosec@master
        with:
          args: '-severity medium ./...'

      - name: Run npm audit
        run: |
          cd persona-frontend
          npm audit --audit-level moderate

      - name: Scan for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD

  deploy-to-mainnet:
    runs-on: ubuntu-latest
    needs: [test-smart-contracts, test-backend, test-frontend, security-scan]
    if: github.ref == 'refs/heads/sprint3/true-zk-onchain'
    environment: production
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup deployment environment
        run: |
          echo "Setting up production deployment..."
          # Add deployment setup steps

      - name: Deploy smart contracts
        env:
          PRIVATE_KEY: ${{ secrets.DEPLOYER_PRIVATE_KEY }}
          RPC_URL: ${{ secrets.MAINNET_RPC_URL }}
        run: |
          # Deploy ZK verifier contracts to mainnet
          echo "Deploying smart contracts to mainnet..."
          # Add contract deployment commands

      - name: Deploy backend services
        env:
          DEPLOYMENT_KEY: ${{ secrets.DEPLOYMENT_KEY }}
          API_URL: ${{ secrets.PRODUCTION_API_URL }}
        run: |
          echo "Deploying backend services..."
          # Add backend deployment commands

      - name: Deploy frontend
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          echo "Deploying frontend to production..."
          # Add frontend deployment commands

  test-production:
    runs-on: ubuntu-latest
    needs: [deploy-to-mainnet]
    if: github.ref == 'refs/heads/sprint3/true-zk-onchain'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install E2E test dependencies
        run: |
          cd tests/e2e
          npm ci

      - name: Run production E2E tests
        env:
          PRODUCTION_BASE_URL: ${{ secrets.PRODUCTION_BASE_URL }}
          PRODUCTION_API_URL: ${{ secrets.PRODUCTION_API_URL }}
          TEST_WALLET_MNEMONIC: ${{ secrets.TEST_WALLET_MNEMONIC }}
        run: |
          cd tests/e2e
          npm run test:prod-e2e

      - name: Run production smoke tests
        env:
          PRODUCTION_API_URL: ${{ secrets.PRODUCTION_API_URL }}
        run: |
          # Test all critical endpoints
          curl -f $PRODUCTION_API_URL/health
          curl -f $PRODUCTION_API_URL/status
          curl -f $PRODUCTION_API_URL/api/zk/circuits

      - name: Validate ZK proof generation
        env:
          PRODUCTION_API_URL: ${{ secrets.PRODUCTION_API_URL }}
        run: |
          # Test real ZK proof generation on production
          cd scripts
          ./test-production-zk.sh

  performance-test:
    runs-on: ubuntu-latest
    needs: [deploy-to-mainnet]
    if: github.ref == 'refs/heads/sprint3/true-zk-onchain'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install performance test tools
        run: |
          npm install -g artillery @playwright/test

      - name: Run load tests
        env:
          PRODUCTION_API_URL: ${{ secrets.PRODUCTION_API_URL }}
        run: |
          # Load test the production API
          artillery run tests/performance/load-test.yml

      - name: Run Lighthouse audit
        uses: treosh/lighthouse-ci-action@v9
        with:
          urls: |
            ${{ secrets.PRODUCTION_BASE_URL }}
            ${{ secrets.PRODUCTION_BASE_URL }}/dashboard
            ${{ secrets.PRODUCTION_BASE_URL }}/verify
          uploadArtifacts: true
          temporaryPublicStorage: true

  notify-completion:
    runs-on: ubuntu-latest
    needs: [test-production, performance-test]
    if: always()
    steps:
      - name: Notify deployment status
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        run: |
          if [ "${{ needs.test-production.result }}" == "success" ] && [ "${{ needs.performance-test.result }}" == "success" ]; then
            echo "✅ Sprint 3 deployment successful!"
            # Send success notification
          else
            echo "❌ Sprint 3 deployment failed!"
            # Send failure notification
          fi

      - name: Generate deployment report
        run: |
          echo "# Sprint 3 Deployment Report" > deployment-report.md
          echo "" >> deployment-report.md
          echo "**Status:** ${{ job.status }}" >> deployment-report.md
          echo "**Branch:** ${{ github.ref }}" >> deployment-report.md
          echo "**Commit:** ${{ github.sha }}" >> deployment-report.md
          echo "**Timestamp:** $(date)" >> deployment-report.md
          echo "" >> deployment-report.md
          echo "## Test Results" >> deployment-report.md
          echo "- Smart Contracts: ${{ needs.test-smart-contracts.result }}" >> deployment-report.md
          echo "- Backend: ${{ needs.test-backend.result }}" >> deployment-report.md
          echo "- Frontend: ${{ needs.test-frontend.result }}" >> deployment-report.md
          echo "- Security Scan: ${{ needs.security-scan.result }}" >> deployment-report.md
          echo "- Production Tests: ${{ needs.test-production.result }}" >> deployment-report.md
          echo "- Performance Tests: ${{ needs.performance-test.result }}" >> deployment-report.md

      - name: Upload deployment report
        uses: actions/upload-artifact@v3
        with:
          name: sprint3-deployment-report
          path: deployment-report.md